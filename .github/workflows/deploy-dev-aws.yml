name: Deploy to dev

on:
  push:
    branches:
      - EN-25

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: entropay-employees
  ECS_SERVICE: entropay-dev-employees
  ECS_CLUSTER: entropay-dev
  CONTAINER_NAME: entropay-employees

permissions:
  contents: read

jobs:
  tag:
    name: Tag
    runs-on: ubuntu-latest
    environment: development
    outputs:
      version: ${{ steps.get-version.outputs.version }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Get version
      id: get-version
      run: |
        export VERSION=$(mvn help:evaluate -Dexpression=project.version -Dexpression=project.version -q -DforceStdout)
        echo "::set-output name=version::${VERSION}"


  package-build-deploy:
    name: Package, build and deploy
    needs: tag
    runs-on: ubuntu-latest
    environment: development

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Run flyway db migrations
      run: |
        # Synchronise s3 bucket with sql directory (--delete deletes any files on the target which no longer exist)
        aws s3 sync src/main/resources/db/migration/ s3://entropay-envs/dev/employees/migrations/ --delete
        aws lambda invoke \
        --function-name dev-db-migration response \
        --log-type Tail \
        --payload '{ "appName": "employees" }' \
        --cli-binary-format raw-in-base64-out
        if grep -q Error response; then
          cat response
          exit 1
        fi


#    - name: Download task definition
#      run: |
#        aws ecs describe-task-definition --task-definition entropay-employees --query taskDefinition > task-definition.json
#
#    - name: Login to Amazon ECR
#      id: login-ecr
#      uses: aws-actions/amazon-ecr-login@v1
#
#    - name: Build, tag, and push image to Amazon ECR
#      id: build-image
#      env:
#        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#        VERSION: ${{ needs.tag.outputs.version }}
#      run: |
#        # Build a docker container and push it to ECR so that it can be deployed to ECS.
#        docker build . -t $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION
#        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION
#        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$VERSION"
#
#    - name: Fill in the new image ID in the Amazon ECS task definition
#      id: task-def
#      uses: aws-actions/amazon-ecs-render-task-definition@v1
#      with:
#        task-definition: task-definition.json
#        container-name: ${{ env.CONTAINER_NAME }}
#        image: ${{ steps.build-image.outputs.image }}
#
#    - name: Deploy Amazon ECS task definition
#      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#      with:
#        task-definition: ${{ steps.task-def.outputs.task-definition }}
#        service: ${{ env.ECS_SERVICE }}
#        cluster: ${{ env.ECS_CLUSTER }}
#        wait-for-service-stability: true
