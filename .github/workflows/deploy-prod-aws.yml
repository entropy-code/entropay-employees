name: Deploy to prod

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: entropay-employees
  ECS_SERVICE: entropay-employees
  ECS_CLUSTER: entropay-prod
  ECS_TASK_DEFINITION: .aws/task-definition.json
  CONTAINER_NAME: entropay-employees           

permissions:
  contents: write
  pull-requests: write

jobs:
  tag:
    name: Tag
    runs-on: ubuntu-latest
    environment: production
    outputs:
      new-version: ${{ steps.get-version.outputs.NEW_VERSION }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Set tag to app
      run: |
        NEW_VERSION=${GITHUB_REF#refs/tags/}
        mvn versions:set -DnewVersion=$NEW_VERSION

    - name: Get Version
      id: get-version
      run: |
        export NEW_VERSION=$(mvn help:evaluate -Dexpression=project.version -Dexpression=project.version -q -DforceStdout)
        echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_OUTPUT

  package-build-deploy:
    name: Package, build and deploy
    needs: tag
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Run flyway migrations
      run: |
        # Synchronise s3 bucket with sql directory (--delete deletes any files on the target which no longer exist)
        aws s3 sync src/main/resources/db/migration/ s3://entropay-prod-envs/employees/migrations/ --delete
        aws lambda invoke \
        --function-name prod-db-migration response \
        --payload '{ "appName": "employees" }' \
        --cli-binary-format raw-in-base64-out
        if grep -q Error response; then
          cat response
          exit 1
        fi

    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition entropay-employee --query taskDefinition > task-definition.json

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        NEW_VERSION: ${{ needs.tag.outputs.new-version }}
      run: |
        # Build a docker container and push it to ECR so that it can be deployed to ECS.
        docker build . -t $ECR_REGISTRY/$ECR_REPOSITORY:NEW_VERSION
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:NEW_VERSION
        echo "image=${ECR_REGISTRY}/${ECR_REPOSITORY}:${NEW_VERSION}" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

  prepare-next-version:
    name: Prepare the next development version
    needs: [ tag, package-build-deploy ]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Set next version
        id: set-next-version
        run: |
          mvn versions:set -DnextSnapshot
          export NEXT_VERSION=$(mvn help:evaluate -Dexpression=project.version -Dexpression=project.version -q -DforceStdout)
          echo "NEXT_VERSION=${NEXT_VERSION}" >> $GITHUB_OUTPUT

      - name: Create pull request
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: Prepare next dev version
          committer: GitHub <noreply@github.com>
          branch: next-version-${{ steps.set-next-version.outputs.NEXT_VERSION }}
          base: ${{ github.head_ref }}
          delete-branch: true
          title: 'Prepare next dev version'
          body: |
            Prepare next dev version
            - Updated pom to the next dev version
            - Auto-generated by [create-pull-request]

          draft: false
